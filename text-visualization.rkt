#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.9 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 58 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 1155 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 6 #"csc151"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 10 #"csc151/rex"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 16 #"rackunit/text-ui"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; CSC-151-01 Spring 2021 Term 1"
0 0 24 29 1 #"\n"
0 0 17 3 16 #"; Mini Project 4"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Author: Hong Doan"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; Date: 2021-02-28"
0 0 24 29 1 #"\n"
0 0 17 3 19 #"; Acknowledgements:"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";  Zaen Chou and Laura Kiely for helping debugging the code"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Reference:"
0 0 24 29 1 #"\n"
0 0 17 3 73
(4
 #";;   Minqing Hu and Bing Liu. \"Mining and Summarizing Customer Revie"
 #"ws.\" "
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(5
 #";       Proceedings of the ACM SIGKDD International Conference on Kno"
 #"wledge "
) 0 0 24 29 1 #"\n"
0 0 17 3 72
(6
 #";       Discovery and Data Mining (KDD-2004), Aug 22-25, 2004, Seattl"
 #"e, "
) 0 0 24 29 1 #"\n"
0 0 17 3 23 #";       Washington, USA"
0 0 24 29 1 #"\n"
0 0 17 3 41 #"; <https://www.gutenberg.org/ebooks/1342>"
0 0 24 29 1 #"\n"
0 0 17 3 29 #"; Hong, Doan - Mini Project 3"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"uppercase"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"rex-char-range"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\A"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\Z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"lowercase"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"rex-char-range"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\a"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"fanboys"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"rex-any-of"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rex-string"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"for\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"rex-string"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"and\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"rex-string"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"nor\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"rex-string"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"but\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"rex-string"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"or\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"rex-string"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"yet\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"rex-string"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"so\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"compound-sentence"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"rex-concat"
0 0 24 3 2 #"  "
0 0 14 3 9 #"uppercase"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 10 #"rex-repeat"
0 0 24 3 2 #" ("
0 0 14 3 12 #"rex-any-char"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 10 #"rex-any-of"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rex-concat"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rex-string"
0 0 24 3 1 #" "
0 0 19 3 4 #"\", \""
0 0 24 3 2 #") "
0 0 14 3 7 #"fanboys"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 10 #"rex-string"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 10 #"rex-repeat"
0 0 24 3 2 #" ("
0 0 14 3 12 #"rex-any-char"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 10 #"rex-any-of"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rex-string"
0 0 24 3 1 #" "
0 0 19 3 3 #"\".\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 10 #"rex-string"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"!\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 10 #"rex-string"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"?\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"test-true"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 6 #"simple"
0 0 19 3 5 #" case"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 12 #"rex-matches?"
0 0 24 3 1 #" "
0 0 14 3 17 #"compound-sentence"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"I"
0 0 19 3 1 #" "
0 0 19 3 2 #"am"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 7 #"student"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 3 #"and"
0 0 19 3 1 #" "
0 0 19 3 1 #"I"
0 0 19 3 1 #" "
0 0 19 3 2 #"am"
0 0 19 3 10 #" studying."
0 0 19 3 1 #"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"test-false"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"wrong"
0 0 19 3 5 #" case"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 12 #"rex-matches?"
0 0 24 3 1 #" "
0 0 14 3 17 #"compound-sentence"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"I"
0 0 19 3 1 #" "
0 0 19 3 2 #"am"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 7 #"student"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 1 #"I"
0 0 19 3 1 #" "
0 0 19 3 2 #"am"
0 0 19 3 10 #" studying."
0 0 19 3 1 #"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"test-false"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"no"
0 0 19 3 7 #" period"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 12 #"rex-matches?"
0 0 24 3 1 #" "
0 0 14 3 17 #"compound-sentence"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"I"
0 0 19 3 1 #" "
0 0 19 3 2 #"am"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 7 #"student"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 3 #"and"
0 0 19 3 1 #" "
0 0 19 3 1 #"I"
0 0 19 3 1 #" "
0 0 19 3 2 #"am"
0 0 19 3 9 #" studying"
0 0 19 3 1 #"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"test-false"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"empty"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 12 #"rex-matches?"
0 0 24 3 1 #" "
0 0 14 3 17 #"compound-sentence"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;; (compound-sentence-count str) -> integer?"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;; str: string?"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;; Count the number of compound sentences in a string."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 23 #"compound-sentence-count"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 16 #"rex-find-matches"
0 0 24 3 1 #" "
0 0 14 3 17 #"compound-sentence"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;; (num-sentences str)->integer?"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;; str: string?"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;; count the number of sentences in a string"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"num-sentences"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 16 #"rex-split-string"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rex-any-of"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rex-string"
0 0 24 3 1 #" "
0 0 19 3 3 #"\".\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 10 #"rex-string"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"!\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 10 #"rex-string"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"?\""
0 0 24 3 3 #")) "
0 0 14 3 3 #"str"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;; (compound-sentence-rate-visual str)-> image?"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;; str: string?"
0 0 24 29 1 #"\n"
0 0 17 3 100
(7
 #";;; produce a rectangle with the height relative to the percentage of"
 #" compound sentences in a string"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(8
 #";;; (bigger rectangle indicates higher frequency of compound sentence"
 #"s in a string)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 29 #"compound-sentence-rate-visual"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 7 #"percent"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 23 #"compound-sentence-count"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 3 #") ("
0 0 14 3 13 #"num-sentences"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 21 3 3 #"150"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 7 #"percent"
0 0 24 3 1 #" "
0 0 21 3 3 #"250"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 6 #"spring"
0 0 19 3 1 #" "
0 0 19 3 6 #"green\""
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 23 #";;; (extract-words str)"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;;   str : string?"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";;; Extract all of the words from str.  A word is a sequence of"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";;; letters and apostrophes."
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;; This procedure is copied from the assignment webpage"
0 0 24 29 1 #"\n"
0 0 17 3 84
(9
 #";;; <https://rebelsky.cs.grinnell.edu/Courses/CSC151/2021SpT1/assignm"
 #"ents/mp03.html>"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"extract-words"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 8 #"rex-word"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"rex-repeat"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rex-any-of"
0 0 24 3 2 #" ("
0 0 14 3 14 #"rex-char-range"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\a"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\z"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 14 #"rex-char-range"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\A"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\Z"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 10 #"rex-string"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"'\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 10 #"rex-string"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 16 #"rex-find-matches"
0 0 24 3 1 #" "
0 0 14 3 8 #"rex-word"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";;; (count-one-word word lst) -> int?"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;; word: string?"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; lst: list?"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;; count how many times a word appear in a list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"count-one-word"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"word"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"tally"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"section"
0 0 24 3 1 #" "
0 0 14 3 11 #"string-ci=?"
0 0 24 3 1 #" "
0 0 14 3 4 #"word"
0 0 24 3 1 #" "
0 0 14 3 2 #"<>"
0 0 24 3 2 #") "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;; (num-positive-words str)->int?"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;; str: string?"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;; Count the number of positive words appear in a string"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"num-positive-words"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 7 #"section"
0 0 24 3 1 #" "
0 0 14 3 14 #"count-one-word"
0 0 24 3 1 #" "
0 0 14 3 2 #"<>"
0 0 24 3 2 #" ("
0 0 14 3 13 #"extract-words"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"extract-words"
0 0 24 3 2 #" ("
0 0 14 3 12 #"file->string"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"positive-words.txt"
0 0 19 3 1 #"\""
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;; (num-negative-words str)->int?"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;; str: string?"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;; Count the number of negative words appear in a string"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"num-negative-words"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 7 #"section"
0 0 24 3 1 #" "
0 0 14 3 14 #"count-one-word"
0 0 24 3 1 #" "
0 0 14 3 2 #"<>"
0 0 24 3 2 #" ("
0 0 14 3 13 #"extract-words"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"extract-words"
0 0 24 3 2 #" ("
0 0 14 3 12 #"file->string"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"negative-words.txt"
0 0 19 3 1 #"\""
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;; (total-words str) -> integers?"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;;    str: string?"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";;; Count the total number of words in a string"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"total-words"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 13 #"extract-words"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;; (square-block color) -> image?"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; color: string?"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";;; Draw a square with the color indicated"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"square-block"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"color"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"overlay"
0 0 24 3 2 #" ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"outline"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"black"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 6 #"square"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"solid"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;; (block-column color) -> image?"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; color: string?"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;; Draw a column of 10 square blocks with the color indicated"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"block-column"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"color"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 5 #"above"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-list"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #" ("
0 0 14 3 12 #"square-block"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;; (column-set number color) -> image?"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";;; number: integer?, natural number"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; color: string?"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;; return a set of number of columns with indicated color"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"column-set"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 4 #"colo"
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 11 #"empty-image"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"beside"
0 0 24 3 2 #" ("
0 0 14 3 12 #"block-column"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 3 #") ("
0 0 14 3 10 #"column-set"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 5 #"color"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";;; (set-of-blocks number color) -> image?"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";;; number: integer?, natural number"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; color: string?"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";;; return a column with number blocks in indicated color"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"set-of-blocks"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 11 #"empty-image"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"above"
0 0 24 3 2 #" ("
0 0 14 3 12 #"square-block"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 3 #") ("
0 0 14 3 13 #"set-of-blocks"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 5 #"color"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;(posneg-visual str)-> image?"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;; str: string?"
0 0 24 29 1 #"\n"
0 0 17 3 86
(10
 #";;; return a 10x10 grid that visualize the use of positive/negative w"
 #"ords in a string."
) 0 0 24 29 1 #"\n"
0 0 17 3 47 #";;; one block represent 1% of words in a string"
0 0 24 29 1 #"\n"
0 0 17 3 71
(11
 #";;; pink is for positve, teal is for negative, and white is for neutr"
 #"al"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"posneg-visual"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"str"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 5 #"total"
0 0 24 3 2 #" ("
0 0 14 3 11 #"total-words"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 5 #"round"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 18 #"num-positive-words"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 3 #") ("
0 0 14 3 11 #"total-words"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 3 #")) "
0 0 21 3 3 #"100"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 3 #"neg"
0 0 24 3 2 #" ("
0 0 14 3 5 #"round"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 18 #"num-negative-words"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 3 #") ("
0 0 14 3 11 #"total-words"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 3 #")) "
0 0 21 3 3 #"100"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 7 #"neutral"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"neg"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 12 #"pos-quotient"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 12 #"neg-quotient"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 1 #" "
0 0 14 3 3 #"neg"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 13 #"pos-remainder"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 13 #"neg-remainder"
0 0 24 3 2 #" ("
0 0 14 3 9 #"remainder"
0 0 24 3 1 #" "
0 0 14 3 3 #"neg"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 11 #"neutral-pos"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 14 3 13 #"pos-remainder"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 11 #"neutral-neg"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 14 3 13 #"neg-remainder"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 16 #"neutral-quotient"
0 0 24 3 2 #" ("
0 0 14 3 8 #"quotient"
0 0 24 3 1 #" "
0 0 14 3 7 #"neutral"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"beside"
0 0 24 3 2 #" ("
0 0 14 3 10 #"column-set"
0 0 24 3 1 #" "
0 0 14 3 12 #"pos-quotient"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"pink"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"above"
0 0 24 3 2 #" ("
0 0 14 3 13 #"set-of-blocks"
0 0 24 3 1 #" "
0 0 14 3 13 #"pos-remainder"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"pink"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 13 #"set-of-blocks"
0 0 24 3 1 #" "
0 0 14 3 11 #"neutral-pos"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"white"
0 0 19 3 1 #"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"column-set"
0 0 24 3 1 #" "
0 0 14 3 16 #"neutral-quotient"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"white"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"above"
0 0 24 3 2 #" ("
0 0 14 3 13 #"set-of-blocks"
0 0 24 3 1 #" "
0 0 14 3 11 #"neutral-neg"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"white"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 13 #"set-of-blocks"
0 0 24 3 1 #" "
0 0 14 3 13 #"neg-remainder"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"teal"
0 0 19 3 1 #"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"column-set"
0 0 24 3 1 #" "
0 0 14 3 12 #"neg-quotient"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"teal\""
0 0 24 3 6 #") ))))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";;; (visualization filename)-> image"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;; filename: string?"
0 0 24 29 1 #"\n"
0 0 17 3 85
(12
 #";;; return an image with a 10x10 grid representing the use of positiv"
 #"e/negative words"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(13
 #";;; and a rectangle representing the percentage of compound sentences"
 #"."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"visualization"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"filename"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"text"
0 0 24 3 2 #" ("
0 0 14 3 12 #"file->string"
0 0 24 3 1 #" "
0 0 14 3 8 #"filename"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"overlay"
0 0 24 3 2 #" ("
0 0 14 3 13 #"posneg-visual"
0 0 24 3 1 #" "
0 0 14 3 4 #"text"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 29 #"compound-sentence-rate-visual"
0 0 24 3 1 #" "
0 0 14 3 4 #"text"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"#| (save-image"
0 0 17 29 1 #"\n"
0 0 17 3 4 #"   ("
0 0 17 3 6 #"beside"
0 0 17 3 15 #" (visualization"
0 0 17 3 1 #" "
0 0 17 3 12 #"\"sample.txt\""
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 12 #"           ("
0 0 17 3 13 #"visualization"
0 0 17 3 1 #" "
0 0 17 3 35 #"\"pride-and-prejudices-chap-1.txt\"))"
0 0 17 29 1 #"\n"
0 0 17 3 3 #"   "
0 0 17 3 1 #"\""
0 0 17 3 13 #"analysis.png\""
0 0 17 3 1 #")"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"#t"
0 0 17 29 1 #"\n"
0 6           4 17 45707
(14
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tr"
 #"anslate 15 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay"
 #" #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(str"
 #"uct:overlay #(struct:translate 0 50 #0=#(struct:translate 0 0 #(struc"
 #"t:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0"
 #" 0 0 0 0 0) #(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point "
 #"0 0 0 0 0 0)) 255 \"black\"))) #(struct:translate 0 0 #(struct:overla"
 #"y #(struct:translate 5 0 #0#) #(struct:translate 0 0 #(struct:overlay"
 #" #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(str"
 #"uct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0"
 #") #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10"
 #" 0 0) #(struct:pulled-point 0 0 0 10 0 0)) outline \"black\"))) #(str"
 #"uct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct"
 #":pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255"
 #" \"white\"))))) #(struct:translate 0 10 #(struct:overlay #(struct:tra"
 #"nslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:translate"
 #" 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pu"
 #"lled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struc"
 #"t:pulled-point 0 0 0 10 0 0)) outline \"black\"))) #(struct:translate"
 #" 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0"
 #" 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point"
 #" 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"white\")))"
 #")) #(struct:translate 0 10 #(struct:overlay #(struct:translate 0 0 #("
 #"struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct"
 #":polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 "
 #"0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-poin"
 #"t 0 0 0 10 0 0)) outline \"black\"))) #(struct:translate 0 0 #(struct"
 #":translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #"
 #"(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 "
 #"0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"white\"))))) #(struct:t"
 #"ranslate 0 10 #(struct:overlay #(struct:translate 0 0 #(struct:overla"
 #"y #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(s"
 #"truct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #"
 #"(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 "
 #"0)) outline \"black\"))) #(struct:translate 0 0 #(struct:translate 0 "
 #"0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulle"
 #"d-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:p"
 #"ulled-point 0 0 0 10 0 0)) 255 \"white\"))))) #(struct:translate 0 10"
 #" #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tr"
 #"anslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-"
 #"point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulle"
 #"d-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) outline "
 #"\"black\"))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:p"
 #"olygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point "
 #"0 0 0 10 0 0)) 255 \"white\"))))) #(struct:translate 0 10 #(struct:ov"
 #"erlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 "
 #"#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 "
 #"0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 "
 #"10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) outline \"black\"))) "
 #"#(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(str"
 #"uct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(s"
 #"truct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)"
 #") 255 \"white\"))))) #(struct:translate 0 10 #(struct:overlay #(struc"
 #"t:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:tran"
 #"slate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(stru"
 #"ct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #("
 #"struct:pulled-point 0 0 0 10 0 0)) outline \"black\"))) #(struct:tran"
 #"slate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-po"
 #"int 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-"
 #"point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"white"
 #"\"))))) #(struct:translate 0 10 #(struct:overlay #(struct:translate 0"
 #" 0 #(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled"
 #"-point 0 0 0 10 0 0)) outline \"black\"))) #(struct:translate 0 0 #(s"
 #"truct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0"
 #" 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 "
 #"10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"white\"))))) #(str"
 #"uct:translate 0 10 #(struct:overlay #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon"
 #" (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0"
 #" 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 "
 #"10 0 0)) outline \"black\"))) #(struct:translate 0 0 #(struct:transla"
 #"te 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:"
 #"pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(str"
 #"uct:pulled-point 0 0 0 10 0 0)) 255 \"white\"))))) #(struct:translate"
 #" 0 10 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:"
 #"pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) outl"
 #"ine \"black\"))) #(struct:translate 0 0 #(struct:translate 0 0 #(stru"
 #"ct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point "
 #"0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-po"
 #"int 0 0 0 10 0 0)) 255 \"white\"))))) #(struct:translate 5 10 #0#))))"
 #"))))))))))))))))))))) #(struct:translate 10 0 #(struct:overlay #(stru"
 #"ct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #"
 #"(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #("
 #"struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 0 0 #19=#(struct:overlay #(struct:transla"
 #"te 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point"
 #" 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) outline \"blac"
 #"k\"))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon"
 #" (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0"
 #" 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 "
 #"10 0 0)) 255 \"white\"))))) #(struct:translate 0 10 #19#))) #(struct:"
 #"translate 0 20 #19#))) #(struct:translate 0 30 #19#))) #(struct:trans"
 #"late 0 40 #19#))) #(struct:translate 0 50 #19#))) #(struct:translate "
 #"0 60 #19#))) #(struct:translate 0 70 #19#))) #(struct:translate 0 80 "
 #"#19#))) #(struct:translate 0 90 #19#))) #(struct:translate 10 0 #(str"
 #"uct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:translat"
 #"e 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #"
 #"(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 0 0 #(struct:overlay #(struct:translate 0 0 #18=#(struct:overla"
 #"y #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(s"
 #"truct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #"
 #"(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 "
 #"0)) outline \"black\"))) #(struct:translate 0 0 #(struct:translate 0 "
 #"0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulle"
 #"d-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:p"
 #"ulled-point 0 0 0 10 0 0)) 255 \"white\"))))) #(struct:translate 0 10"
 #" #18#))) #(struct:translate 0 20 #18#))) #(struct:translate 0 30 #18#"
 #"))) #(struct:translate 0 40 #18#))) #(struct:translate 0 50 #18#))) #"
 #"(struct:translate 0 60 #18#))) #(struct:translate 0 70 #18#))) #(stru"
 #"ct:translate 0 80 #18#))) #(struct:translate 0 90 #18#))) #(struct:tr"
 #"anslate 10 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay"
 #" #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(str"
 #"uct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:translat"
 #"e 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #"
 #"17=#(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled"
 #"-point 0 0 0 10 0 0)) outline \"black\"))) #(struct:translate 0 0 #(s"
 #"truct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0"
 #" 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 "
 #"10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"white\"))))) #(str"
 #"uct:translate 0 10 #17#))) #(struct:translate 0 20 #17#))) #(struct:t"
 #"ranslate 0 30 #17#))) #(struct:translate 0 40 #17#))) #(struct:transl"
 #"ate 0 50 #17#))) #(struct:translate 0 60 #17#))) #(struct:translate 0"
 #" 70 #17#))) #(struct:translate 0 80 #17#))) #(struct:translate 0 90 #"
 #"17#))) #(struct:translate 10 0 #(struct:overlay #(struct:translate 0 "
 #"0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay"
 #" #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(str"
 #"uct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:translat"
 #"e 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:translate 0 0 #16=#(struct:overlay #(struct:translate 0 0 #(struct"
 #":translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #"
 #"(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 "
 #"0) #(struct:pulled-point 0 0 0 10 0 0)) outline \"black\"))) #(struct"
 #":translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pull"
 #"ed-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pu"
 #"lled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \""
 #"white\"))))) #(struct:translate 0 10 #16#))) #(struct:translate 0 20 "
 #"#16#))) #(struct:translate 0 30 #16#))) #(struct:translate 0 40 #16#)"
 #")) #(struct:translate 0 50 #16#))) #(struct:translate 0 60 #16#))) #("
 #"struct:translate 0 70 #16#))) #(struct:translate 0 80 #16#))) #(struc"
 #"t:translate 0 90 #16#))) #(struct:translate 10 0 #(struct:overlay #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:"
 #"overlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 "
 #"0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay"
 #" #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(str"
 #"uct:overlay #(struct:translate 0 0 #15=#(struct:overlay #(struct:tran"
 #"slate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-po"
 #"int 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-"
 #"point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) outline \"b"
 #"lack\"))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 "
 #"0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0"
 #" 0 10 0 0)) 255 \"white\"))))) #(struct:translate 0 10 #15#))) #(stru"
 #"ct:translate 0 20 #15#))) #(struct:translate 0 30 #15#))) #(struct:tr"
 #"anslate 0 40 #15#))) #(struct:translate 0 50 #15#))) #(struct:transla"
 #"te 0 60 #15#))) #(struct:translate 0 70 #15#))) #(struct:translate 0 "
 #"80 #15#))) #(struct:translate 0 90 #15#))) #(struct:translate 10 0 #("
 #"struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:trans"
 #"late 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:"
 #"overlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 "
 #"0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:translate 0 0 #14=#(struct:ove"
 #"rlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon ("
 #"#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0"
 #") #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10"
 #" 0 0)) outline \"black\"))) #(struct:translate 0 0 #(struct:translate"
 #" 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pu"
 #"lled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struc"
 #"t:pulled-point 0 0 0 10 0 0)) 255 \"white\"))))) #(struct:translate 0"
 #" 10 #14#))) #(struct:translate 0 20 #14#))) #(struct:translate 0 30 #"
 #"14#))) #(struct:translate 0 40 #14#))) #(struct:translate 0 50 #14#))"
 #") #(struct:translate 0 60 #14#))) #(struct:translate 0 70 #14#))) #(s"
 #"truct:translate 0 80 #14#))) #(struct:translate 0 90 #14#))) #(struct"
 #":translate 10 0 #(struct:overlay #(struct:translate 0 0 #(struct:over"
 #"lay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #("
 #"struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:trans"
 #"late 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:"
 #"overlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 "
 #"0 #13=#(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 "
 #"#(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-"
 #"point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pul"
 #"led-point 0 0 0 10 0 0)) outline \"black\"))) #(struct:translate 0 0 "
 #"#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 "
 #"0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 "
 #"10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"white\"))))) #("
 #"struct:translate 0 10 #13#))) #(struct:translate 0 20 #13#))) #(struc"
 #"t:translate 0 30 #13#))) #(struct:translate 0 40 #13#))) #(struct:tra"
 #"nslate 0 50 #13#))) #(struct:translate 0 60 #13#))) #(struct:translat"
 #"e 0 70 #13#))) #(struct:translate 0 80 #13#))) #(struct:translate 0 9"
 #"0 #13#))) #(struct:translate 10 0 #(struct:overlay #(struct:translate"
 #" 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struc"
 #"t:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:over"
 #"lay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #("
 #"struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:trans"
 #"late 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(s"
 #"truct:translate 0 0 #12=#(struct:overlay #(struct:translate 0 0 #(str"
 #"uct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0"
 #") #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10"
 #" 0 0) #(struct:pulled-point 0 0 0 10 0 0)) outline \"black\"))) #(str"
 #"uct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct"
 #":pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255"
 #" \"white\"))))) #(struct:translate 0 10 #12#))) #(struct:translate 0 "
 #"20 #12#))) #(struct:translate 0 30 #12#))) #(struct:translate 0 40 #1"
 #"2#))) #(struct:translate 0 50 #12#))) #(struct:translate 0 60 #12#)))"
 #" #(struct:translate 0 70 #12#))) #(struct:translate 0 80 #12#))) #(st"
 #"ruct:translate 0 90 #12#))) #(struct:translate 10 0 #(struct:overlay "
 #"#(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:translate"
 #" 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struc"
 #"t:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:over"
 #"lay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #("
 #"struct:overlay #(struct:translate 0 0 #11=#(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled"
 #"-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pull"
 #"ed-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) outline "
 #"\"black\"))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:p"
 #"olygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point "
 #"0 0 0 10 0 0)) 255 \"white\"))))) #(struct:translate 0 10 #11#))) #(s"
 #"truct:translate 0 20 #11#))) #(struct:translate 0 30 #11#))) #(struct"
 #":translate 0 40 #11#))) #(struct:translate 0 50 #11#))) #(struct:tran"
 #"slate 0 60 #11#))) #(struct:translate 0 70 #11#))) #(struct:translate"
 #" 0 80 #11#))) #(struct:translate 0 90 #11#))) #(struct:translate 10 0"
 #" #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tr"
 #"anslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay "
 #"#(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:translate"
 #" 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struc"
 #"t:translate 0 0 #(struct:overlay #(struct:translate 0 0 #10=#(struct:"
 #"overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygo"
 #"n (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 "
 #"0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0"
 #" 10 0 0)) outline \"black\"))) #(struct:translate 0 0 #(struct:transl"
 #"ate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct"
 #":pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(st"
 #"ruct:pulled-point 0 0 0 10 0 0)) 255 \"white\"))))) #(struct:translat"
 #"e 0 10 #10#))) #(struct:translate 0 20 #10#))) #(struct:translate 0 3"
 #"0 #10#))) #(struct:translate 0 40 #10#))) #(struct:translate 0 50 #10"
 #"#))) #(struct:translate 0 60 #10#))) #(struct:translate 0 70 #10#))) "
 #"#(struct:translate 0 80 #10#))) #(struct:translate 0 90 #10#))) #(str"
 #"uct:translate 10 50 #0#))))))))))))))))))))))) #(struct:translate 110"
 #" 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:"
 #"translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:transl"
 #"ate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct"
 #":pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(st"
 #"ruct:pulled-point 0 0 0 10 0 0)) outline \"black\"))) #(struct:transl"
 #"ate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-poin"
 #"t 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-po"
 #"int 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"white\""
 #"))))) #(struct:translate 0 10 #(struct:overlay #(struct:translate 0 0"
 #" #(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(str"
 #"uct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point"
 #" 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-p"
 #"oint 0 0 0 10 0 0)) outline \"black\"))) #(struct:translate 0 0 #(str"
 #"uct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0"
 #") #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10"
 #" 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"white\"))))) #(struc"
 #"t:translate 0 10 #(struct:overlay #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon ("
 #"#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0"
 #") #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10"
 #" 0 0)) outline \"black\"))) #(struct:translate 0 0 #(struct:translate"
 #" 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pu"
 #"lled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struc"
 #"t:pulled-point 0 0 0 10 0 0)) 255 \"white\"))))) #(struct:translate 0"
 #" 10 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct"
 #":translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pull"
 #"ed-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pu"
 #"lled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) outlin"
 #"e \"black\"))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct"
 #":polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 "
 #"0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-poin"
 #"t 0 0 0 10 0 0)) 255 \"white\"))))) #(struct:translate 0 10 #(struct:"
 #"overlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 "
 #"0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 "
 #"0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) outline \"black\"))"
 #") #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(s"
 #"truct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #"
 #"(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 "
 #"0)) 255 \"white\"))))) #(struct:translate 0 10 #(struct:overlay #(str"
 #"uct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:tr"
 #"anslate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(st"
 #"ruct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) "
 #"#(struct:pulled-point 0 0 0 10 0 0)) outline \"black\"))) #(struct:tr"
 #"anslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-"
 #"point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulle"
 #"d-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"whi"
 #"te\"))))) #(struct:translate 0 10 #(struct:overlay #(struct:translate"
 #" 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #"
 #"(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-p"
 #"oint 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pull"
 #"ed-point 0 0 0 10 0 0)) outline \"black\"))) #(struct:translate 0 0 #"
 #"(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0"
 #" 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 1"
 #"0 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"white\"))))) #(s"
 #"truct:translate 0 10 #(struct:overlay #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0"
 #" 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 "
 #"0 10 0 0)) outline \"black\"))) #(struct:translate 0 0 #(struct:trans"
 #"late 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struc"
 #"t:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(s"
 #"truct:pulled-point 0 0 0 10 0 0)) 255 \"white\"))))) #(struct:transla"
 #"te 0 10 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(st"
 #"ruct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:"
 #"pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struc"
 #"t:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) ou"
 #"tline \"black\"))) #(struct:translate 0 0 #(struct:translate 0 0 #(st"
 #"ruct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poin"
 #"t 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-"
 #"point 0 0 0 10 0 0)) 255 \"white\"))))) #(struct:translate 0 10 #(str"
 #"uct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:translat"
 #"e 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point "
 #"0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-poin"
 #"t 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) outline \"black"
 #"\"))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon "
 #"(#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 "
 #"0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 1"
 #"0 0 0)) 255 \"white\"))))) #(struct:translate 5 10 #0#)))))))))))))))"
 #")))))) #(struct:translate 5 100 #0#))))) #(struct:translate 120 50 #0"
 #"#))) #(struct:translate 0 25/3 #(struct:translate 0 0 #(struct:polygo"
 #"n (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 150 0"
 #" 0 0) #(struct:pulled-point 0 0 150 250/3 0 0) #(struct:pulled-point "
 #"0 0 0 250/3 0 0)) 255 \"spring green\"))))) #(struct:translate 150 0 "
 #"#(struct:overlay #(struct:translate 20 0 #(struct:overlay #(struct:tr"
 #"anslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay "
 #"#(struct:translate 0 0 #(struct:overlay #(struct:translate 0 50 #0#) "
 #"#(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:translate"
 #" 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0"
 #" 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point"
 #" 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) outline \"black"
 #"\"))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon "
 #"(#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 "
 #"0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 1"
 #"0 0 0)) 255 \"pink\"))))) #(struct:translate 0 10 #(struct:overlay #("
 #"struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct"
 #":translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #"
 #"(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 "
 #"0) #(struct:pulled-point 0 0 0 10 0 0)) outline \"black\"))) #(struct"
 #":translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pull"
 #"ed-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pu"
 #"lled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \""
 #"pink\"))))) #(struct:translate 0 10 #(struct:overlay #(struct:transla"
 #"te 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0"
 #" #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled"
 #"-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pu"
 #"lled-point 0 0 0 10 0 0)) outline \"black\"))) #(struct:translate 0 0"
 #" #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0"
 #" 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0"
 #" 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"pink\"))))) #("
 #"struct:translate 0 10 #(struct:overlay #(struct:translate 0 0 #(struc"
 #"t:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 "
 #"0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0"
 #" 0 10 0 0)) outline \"black\"))) #(struct:translate 0 0 #(struct:tran"
 #"slate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(stru"
 #"ct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #("
 #"struct:pulled-point 0 0 0 10 0 0)) 255 \"pink\"))))) #(struct:transla"
 #"te 0 10 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(st"
 #"ruct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:"
 #"pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struc"
 #"t:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) ou"
 #"tline \"black\"))) #(struct:translate 0 0 #(struct:translate 0 0 #(st"
 #"ruct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poin"
 #"t 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-"
 #"point 0 0 0 10 0 0)) 255 \"pink\"))))) #(struct:translate 0 10 #(stru"
 #"ct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:translate"
 #" 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0"
 #" 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point"
 #" 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) outline \"black"
 #"\"))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon "
 #"(#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 "
 #"0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 1"
 #"0 0 0)) 255 \"pink\"))))) #(struct:translate 5 10 #0#))))))))))))) #("
 #"struct:translate 0 60 #(struct:overlay #(struct:translate 0 0 #(struc"
 #"t:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 "
 #"0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0"
 #" 0 10 0 0)) outline \"black\"))) #(struct:translate 0 0 #(struct:tran"
 #"slate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(stru"
 #"ct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #("
 #"struct:pulled-point 0 0 0 10 0 0)) 255 \"white\"))))) #(struct:transl"
 #"ate 0 10 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(s"
 #"truct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct"
 #":pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(stru"
 #"ct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) o"
 #"utline \"black\"))) #(struct:translate 0 0 #(struct:translate 0 0 #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled"
 #"-point 0 0 0 10 0 0)) 255 \"white\"))))) #(struct:translate 0 10 #(st"
 #"ruct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:transla"
 #"te 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point"
 #" 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) outline \"blac"
 #"k\"))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon"
 #" (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0"
 #" 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 "
 #"10 0 0)) 255 \"white\"))))) #(struct:translate 0 10 #(struct:overlay "
 #"#(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(stru"
 #"ct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0)"
 #" #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 "
 #"0 0) #(struct:pulled-point 0 0 0 10 0 0)) outline \"black\"))) #(stru"
 #"ct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pu"
 #"lled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:"
 #"pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 "
 #"\"white\"))))) #(struct:translate 5 10 #0#))))))))))))) #(struct:tran"
 #"slate 10 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #"
 #"(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struc"
 #"t:overlay #(struct:translate 0 0 #(struct:overlay #(struct:translate "
 #"0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct"
 #":translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #9="
 #"#(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(stru"
 #"ct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point "
 #"0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-po"
 #"int 0 0 0 10 0 0)) outline \"black\"))) #(struct:translate 0 0 #(stru"
 #"ct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0)"
 #" #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 "
 #"0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"white\"))))) #(struct"
 #":translate 0 10 #9#))) #(struct:translate 0 20 #9#))) #(struct:transl"
 #"ate 0 30 #9#))) #(struct:translate 0 40 #9#))) #(struct:translate 0 5"
 #"0 #9#))) #(struct:translate 0 60 #9#))) #(struct:translate 0 70 #9#))"
 #") #(struct:translate 0 80 #9#))) #(struct:translate 0 90 #9#))) #(str"
 #"uct:translate 10 0 #(struct:overlay #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0"
 #" #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tr"
 #"anslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay "
 #"#(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:translate"
 #" 0 0 #8=#(struct:overlay #(struct:translate 0 0 #(struct:translate 0 "
 #"0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulle"
 #"d-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:p"
 #"ulled-point 0 0 0 10 0 0)) outline \"black\"))) #(struct:translate 0 "
 #"0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 "
 #"0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"white\"))))) "
 #"#(struct:translate 0 10 #8#))) #(struct:translate 0 20 #8#))) #(struc"
 #"t:translate 0 30 #8#))) #(struct:translate 0 40 #8#))) #(struct:trans"
 #"late 0 50 #8#))) #(struct:translate 0 60 #8#))) #(struct:translate 0 "
 #"70 #8#))) #(struct:translate 0 80 #8#))) #(struct:translate 0 90 #8#)"
 #")) #(struct:translate 10 0 #(struct:overlay #(struct:translate 0 0 #("
 #"struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:trans"
 #"late 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:"
 #"overlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 "
 #"0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #7=#(struct:overlay #(struct:translate 0 0 #(struct:tran"
 #"slate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(stru"
 #"ct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #("
 #"struct:pulled-point 0 0 0 10 0 0)) outline \"black\"))) #(struct:tran"
 #"slate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-po"
 #"int 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-"
 #"point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"white"
 #"\"))))) #(struct:translate 0 10 #7#))) #(struct:translate 0 20 #7#)))"
 #" #(struct:translate 0 30 #7#))) #(struct:translate 0 40 #7#))) #(stru"
 #"ct:translate 0 50 #7#))) #(struct:translate 0 60 #7#))) #(struct:tran"
 #"slate 0 70 #7#))) #(struct:translate 0 80 #7#))) #(struct:translate 0"
 #" 90 #7#))) #(struct:translate 10 0 #(struct:overlay #(struct:translat"
 #"e 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #"
 #"(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #("
 #"struct:translate 0 0 #6=#(struct:overlay #(struct:translate 0 0 #(str"
 #"uct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0"
 #") #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10"
 #" 0 0) #(struct:pulled-point 0 0 0 10 0 0)) outline \"black\"))) #(str"
 #"uct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct"
 #":pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255"
 #" \"white\"))))) #(struct:translate 0 10 #6#))) #(struct:translate 0 2"
 #"0 #6#))) #(struct:translate 0 30 #6#))) #(struct:translate 0 40 #6#))"
 #") #(struct:translate 0 50 #6#))) #(struct:translate 0 60 #6#))) #(str"
 #"uct:translate 0 70 #6#))) #(struct:translate 0 80 #6#))) #(struct:tra"
 #"nslate 0 90 #6#))) #(struct:translate 10 0 #(struct:overlay #(struct:"
 #"translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overla"
 #"y #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(st"
 #"ruct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:transla"
 #"te 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(str"
 #"uct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:ov"
 #"erlay #(struct:translate 0 0 #5=#(struct:overlay #(struct:translate 0"
 #" 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0"
 #" 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0"
 #" 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) outline \"black\")"
 #")) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#("
 #"struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) "
 #"#(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0"
 #" 0)) 255 \"white\"))))) #(struct:translate 0 10 #5#))) #(struct:trans"
 #"late 0 20 #5#))) #(struct:translate 0 30 #5#))) #(struct:translate 0 "
 #"40 #5#))) #(struct:translate 0 50 #5#))) #(struct:translate 0 60 #5#)"
 #")) #(struct:translate 0 70 #5#))) #(struct:translate 0 80 #5#))) #(st"
 #"ruct:translate 0 90 #5#))) #(struct:translate 10 0 #(struct:overlay #"
 #"(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struc"
 #"t:overlay #(struct:translate 0 0 #(struct:overlay #(struct:translate "
 #"0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct"
 #":translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overl"
 #"ay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(s"
 #"truct:overlay #(struct:translate 0 0 #4=#(struct:overlay #(struct:tra"
 #"nslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-p"
 #"oint 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled"
 #"-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) outline \""
 #"black\"))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:pol"
 #"ygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10"
 #" 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 "
 #"0 0 10 0 0)) 255 \"white\"))))) #(struct:translate 0 10 #4#))) #(stru"
 #"ct:translate 0 20 #4#))) #(struct:translate 0 30 #4#))) #(struct:tran"
 #"slate 0 40 #4#))) #(struct:translate 0 50 #4#))) #(struct:translate 0"
 #" 60 #4#))) #(struct:translate 0 70 #4#))) #(struct:translate 0 80 #4#"
 #"))) #(struct:translate 0 90 #4#))) #(struct:translate 10 0 #(struct:o"
 #"verlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0"
 #" #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tr"
 #"anslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay "
 #"#(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:translate"
 #" 0 0 #(struct:overlay #(struct:translate 0 0 #3=#(struct:overlay #(st"
 #"ruct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:"
 #"pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struc"
 #"t:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) ou"
 #"tline \"black\"))) #(struct:translate 0 0 #(struct:translate 0 0 #(st"
 #"ruct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poin"
 #"t 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-"
 #"point 0 0 0 10 0 0)) 255 \"white\"))))) #(struct:translate 0 10 #3#))"
 #") #(struct:translate 0 20 #3#))) #(struct:translate 0 30 #3#))) #(str"
 #"uct:translate 0 40 #3#))) #(struct:translate 0 50 #3#))) #(struct:tra"
 #"nslate 0 60 #3#))) #(struct:translate 0 70 #3#))) #(struct:translate "
 #"0 80 #3#))) #(struct:translate 0 90 #3#))) #(struct:translate 10 0 #("
 #"struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:trans"
 #"late 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(s"
 #"truct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:"
 #"overlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 "
 #"0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:translate 0 0 #2=#(struct:over"
 #"lay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#"
 #"(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0)"
 #" #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 "
 #"0 0)) outline \"black\"))) #(struct:translate 0 0 #(struct:translate "
 #"0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pul"
 #"led-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct"
 #":pulled-point 0 0 0 10 0 0)) 255 \"white\"))))) #(struct:translate 0 "
 #"10 #2#))) #(struct:translate 0 20 #2#))) #(struct:translate 0 30 #2#)"
 #")) #(struct:translate 0 40 #2#))) #(struct:translate 0 50 #2#))) #(st"
 #"ruct:translate 0 60 #2#))) #(struct:translate 0 70 #2#))) #(struct:tr"
 #"anslate 0 80 #2#))) #(struct:translate 0 90 #2#))) #(struct:translate"
 #" 10 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #"
 #"(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #("
 #"struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #1=#(str"
 #"uct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:po"
 #"lygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 1"
 #"0 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0"
 #" 0 0 10 0 0)) outline \"black\"))) #(struct:translate 0 0 #(struct:tr"
 #"anslate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(st"
 #"ruct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) "
 #"#(struct:pulled-point 0 0 0 10 0 0)) 255 \"white\"))))) #(struct:tran"
 #"slate 0 10 #1#))) #(struct:translate 0 20 #1#))) #(struct:translate 0"
 #" 30 #1#))) #(struct:translate 0 40 #1#))) #(struct:translate 0 50 #1#"
 #"))) #(struct:translate 0 60 #1#))) #(struct:translate 0 70 #1#))) #(s"
 #"truct:translate 0 80 #1#))) #(struct:translate 0 90 #1#))) #(struct:t"
 #"ranslate 10 50 #0#))))))))))))))))))))) #(struct:translate 100 0 #(st"
 #"ruct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:transla"
 #"te 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0"
 #" #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled"
 #"-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pu"
 #"lled-point 0 0 0 10 0 0)) outline \"black\"))) #(struct:translate 0 0"
 #" #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0"
 #" 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0"
 #" 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"white\"))))) #"
 #"(struct:translate 0 10 #(struct:overlay #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:pol"
 #"ygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10"
 #" 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 "
 #"0 0 10 0 0)) outline \"black\"))) #(struct:translate 0 0 #(struct:tra"
 #"nslate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(str"
 #"uct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #"
 #"(struct:pulled-point 0 0 0 10 0 0)) 255 \"white\"))))) #(struct:trans"
 #"late 0 10 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #("
 #"struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struc"
 #"t:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(str"
 #"uct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) "
 #"outline \"black\"))) #(struct:translate 0 0 #(struct:translate 0 0 #("
 #"struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-po"
 #"int 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulle"
 #"d-point 0 0 0 10 0 0)) 255 \"white\"))))) #(struct:translate 0 10 #(s"
 #"truct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:transl"
 #"ate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-poin"
 #"t 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-po"
 #"int 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) outline \"bla"
 #"ck\"))) #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygo"
 #"n (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 "
 #"0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0"
 #" 10 0 0)) 255 \"white\"))))) #(struct:translate 0 10 #(struct:overlay"
 #" #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(str"
 #"uct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0"
 #") #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10"
 #" 0 0) #(struct:pulled-point 0 0 0 10 0 0)) outline \"black\"))) #(str"
 #"uct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct"
 #":pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255"
 #" \"white\"))))) #(struct:translate 0 10 #(struct:overlay #(struct:tra"
 #"nslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:translate"
 #" 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pu"
 #"lled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struc"
 #"t:pulled-point 0 0 0 10 0 0)) outline \"black\"))) #(struct:translate"
 #" 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0"
 #" 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point"
 #" 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"white\")))"
 #")) #(struct:translate 0 10 #(struct:overlay #(struct:translate 0 0 #("
 #"struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct"
 #":polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 "
 #"0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-poin"
 #"t 0 0 0 10 0 0)) outline \"black\"))) #(struct:translate 0 0 #(struct"
 #":translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #"
 #"(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 "
 #"0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"white\"))))) #(struct:t"
 #"ranslate 5 10 #0#))))))))))))))) #(struct:translate 0 70 #(struct:ove"
 #"rlay #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #"
 #"(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0"
 #" 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 1"
 #"0 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) outline \"black\"))) #"
 #"(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(stru"
 #"ct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(st"
 #"ruct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0))"
 #" 255 \"teal\"))))) #(struct:translate 0 10 #(struct:overlay #(struct:"
 #"translate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:transl"
 #"ate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct"
 #":pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(st"
 #"ruct:pulled-point 0 0 0 10 0 0)) outline \"black\"))) #(struct:transl"
 #"ate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-poin"
 #"t 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-po"
 #"int 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"teal\")"
 #")))) #(struct:translate 0 10 #(struct:overlay #(struct:translate 0 0 "
 #"#(struct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(stru"
 #"ct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point "
 #"0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-po"
 #"int 0 0 0 10 0 0)) outline \"black\"))) #(struct:translate 0 0 #(stru"
 #"ct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0)"
 #" #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 "
 #"0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"teal\"))))) #(struct:"
 #"translate 5 10 #0#))))))))))) #(struct:translate 110 50 #0#))) #(stru"
 #"ct:translate 0 2825/59 #(struct:translate 0 0 #(struct:polygon (#(str"
 #"uct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 150 0 0 0) #("
 #"struct:pulled-point 0 0 150 250/59 0 0) #(struct:pulled-point 0 0 0 2"
 #"50/59 0 0)) 255 \"spring green\")))))) #(struct:bb 300 100 100) #f)"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 63
#"- The file \"sample.txt\" used compound sentences more frequently"
0 0 17 29 1 #"\n"
0 0 17 3 70
(15
 #"(which means its ratio (compound sentences/total sentences) is higher"
 #","
) 0 0 17 29 1 #"\n"
0 0 17 3 78
(16
 #"and can not be inferred to the file \"sample.txt\" has more compound "
 #"sentences.)"
) 0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 86
(17
 #"- The percentages of both positive and negative words in \"sample.txt"
 #"\" is less than 1%,"
) 0 0 17 29 1 #"\n"
0 0 17 3 62
#"which indicated by all blocks in the grid are white (neutral)."
0 0 17 29 1 #"\n"
0 0 17 3 97
(18
 #"- The file \"pride-and-prejudice-chap-1.txt\" contains about 6% posit"
 #"ve words and 3% negative words"
) 0 0 17 29 1 #"\n"
0 0 17 3 34 #"(6 pink blocks and 3 teal blocks)."
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0           0
